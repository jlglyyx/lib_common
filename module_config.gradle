if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        resConfigs "zh"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation"  : "$projectDir/schemas".toString(),
                             "room.incremental"     : "true",
                             "room.expandProjection": "true",
                             "AROUTER_MODULE_NAME"  : project.getName()]
                includeCompileClasspath = false
            }
        }

        ndk{
            abiFilters  "armeabi-v7a","arm64-v8a"
        }
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    exclude 'src/main/module/*'
                }
            }
        }
    }

    dependencies {
        rootProject.ext.kaptDependencies.each { k, v -> kapt v }
        rootProject.ext.compileOnlyDependencies.each { k, v -> compileOnly v }
        rootProject.ext.kaptProjectDependencies.each { k, v -> kapt project(path: v) }
//        implementation project(path: ':apt-annotation')
//        implementation project(path: ':apt-processor')
    }
}

